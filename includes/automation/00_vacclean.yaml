# Пылесос
- alias: 'Vacuum Time Clean'
  initial_state: true
  trigger:
    platform: time
    at: '11:00'
  condition:
    condition: state
    entity_id: binary_sensor.workday
    state: 'on'
  action: 
    - service: vacuum.start
      entity_id: vacuum.robot_pylesos

- alias: 'Vacuum Cleaning'
  initial_state: true
  trigger:
    platform: state
    entity_id: vacuum.robot_pylesos
    to: 'cleaning'
  action:
    - service: notify.telegram
      data:
        message: 'Пылесос начал уборку'

- alias: 'Vacuum Returning'
  initial_state: true
  trigger:
    platform: state
    entity_id: vacuum.robot_pylesos
    to: 'returning'
  action:
    - service: notify.telegram
      data:
        message: 'Пылесос завершил уборку и возвращается на станцию'
#- alias: 'Vacuum Docked'
#  trigger:
#    platform: state
#    entity_id: vacuum.xiaomi_vacuum_cleaner
#    to: 'docked'
#  action:
#     - service: notify.telegram
#       data:
#         message: 'Пылесос прибыл на станцию и заряжается'

- alias: 'Vacuum Cleaner Error'
  initial_state: true
  trigger:
    - platform: state
      entity_id: sensor.vacuum_cleaner_status_sensor
      to: 'Error'
    - platform: state
      entity_id: sensor.vacuum_cleaner_status_sensor
      to: 'In Error'
    - platform: state
      entity_id: sensor.vacuum_cleaner_status_sensor
      to: 'Charging Error'
  action:
    - service: notify.telegram
      data:
        message: >-
          {% if is_state('sensor.vacuum_cleaner_error_sensor', 'No Error')  %}
            {{states.sensor.vacuum_cleaner_status_sensor.state}}
          {% else %}
            {{states.sensor.vacuum_cleaner_error_sensor.state}}
          {% endif %}

- alias: Vacuum Cleaner Error Solved
  initial_state: true
  trigger:
    - platform: state
      entity_id: sensor.vacuum_cleaner_error_sensor
      to: 'No Error'
  action:
    - service: notify.telegram
      data:
        message: Пылесос вне опасности